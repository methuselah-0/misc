#!/bin/sh
#
# Copyright IBM, Corp. 2010  
#
# Authors:
#  Anthony Liguori <aliguori@us.ibm.com>
#
# This work is licensed under the terms of the GNU GPL, version 2.  See
# the COPYING file in the top-level directory.
# -----------------------------------------------------------------------
#  COPYRIGHT Â© 2017 David Larsson <david.larsson@selfhosted.xyz>
#
#  new_luks_lvm_backup.sh is free software: you can redistribute it and/or
#+ modify it under the terms of the GNU General Public License as
#+ published by the Free Software Foundation, either version 3 of the
#+ License, or (at your option) any later version.
#  
#  new_luks_lvm_backup.sh is distributed in the hope that it will be
#+ useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#+ of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#+ General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#+ along with new_luks_lvm_backup.sh.  If not, see
#+ <http://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------
# run with qemu-ifup $$ $bridge $tapdevice $username, see asms-gtk for
# an example
do_Enable_Ip_Forward() {
    echo 1 | dd of=/proc/sys/net/ipv4/ip_forward > /dev/null
}

do_Routing_Filter(){
    iptables --flush
    iptables -A POSTROUTING -s $_NETWORK/$_NETMASK -j MASQUERADE     
    iptables -A INPUT -i $_BRIDGE -p tcp -m tcp --dport 67 -j ACCEPT
    iptables -A INPUT -i $_BRIDGE -p udp -m udp --dport 67 -j ACCEPT
    iptables -A INPUT -i $_BRIDGE -p tcp -m tcp --dport 53 -j ACCEPT
    iptables -A INPUT -i $_BRIDGE -p udp -m udp --dport 53 -j ACCEPT
    iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    iptables -P INPUT DROP
    iptables -A FORWARD -i $1 -o $1 -j ACCEPT
    iptables -A FORWARD -s $_LNETWORK/$_LNETMASK -o $_BRIDGE -j ACCEPT
    iptables -A FORWARD -s $_NETWORK/$_NETMASK -d $_LNETWORK/$_LNETMASK -o $_BRIDGE -m state --state RELATED,ESTABLISHED -j ACCEPT
    iptables -A FORWARD -o $_BRIDGE -j REJECT --reject-with icmp-port-unreachable # ACCEPT
    iptables -A FORWARD -i $_BRIDGE -j REJECT --reject-with icmp-port-unreachable # ACCEPT
    iptables -P OUTPUT ACCEPT
}
do_Start_Dnsmasq() {
    dnsmasq \
	--strict-order \
	--except-interface=lo \
	--interface=$_BRIDGE \
	--listen-address=$_GATEWAY \
	--bind-interfaces \
	--dhcp-range=$_DHCPRANGE \
	--conf-file="" \
	--pid-file=/var/run/qemu-dnsmasq-$_BRIDGE.pid \
	--dhcp-leasefile=/var/run/qemu-dnsmasq-$_BRIDGE.leases \
	--dhcp-no-override \
	${_TFTPROOT:+"--enable-tftp"} \
	${_TFTPROOT:+"--tftp-root=$_TFTPROOT"} \
	${_BOOTP:+"--dhcp-boot=$_BOOTP"}
}

do_Setup_Bridge_Vlan() {
    if set__BRIDGE "$1" ; then
	do_Create_Bridge "$1"
	do_Start_Dnsmasq "$1"
    fi
}

main(){ # tapN -> network_setup
    #_ID="$(ps --pid $1 | sort | head -n 1 | awk ' { print $1 } ')"
    # Set to the preferred name of your bridge and tap interface.
    _BRIDGE=${2:-"br0"}
    _TAP=${3:-"tap0"}
    # Local Network information
    _LNETWORK=192.168.1.0
    _LNETMASK=255.255.255.0
    #GATEWAY=192.168.53.2
    #DHCPRANGE=192.168.53.3,192.168.53.3
    _NETWORK=192.168.2.0
    _NETMASK=255.255.255.0
    _GATEWAY=192.168.2.1
    _DHCPRANGE=192.168.2.35,192.168.2.35
    _USER=${4:-"user1"}
    _TYPE="dhcp" # or dhcp
    # Optionally parameters to enable PXE support
    _TFTPROOT=
    _BOOTP=
    set__BRIDGE() {
	if brctl show | grep "^$1" > /dev/null 2> /dev/null; then
	    declare -i n="${1#br}"
	    n+=1
	    set__BRIDGE "br$n"
	else
	    return 0
	fi
    }
    do_Create_Bridge() {
	brctl addbr "$1"
	brctl stp "$1" off
	brctl setfd "$1" 0
	ifconfig "$1" "$_GATEWAY" netmask "$_NETMASK" up
    }
    set__TAP() {
	if ifconfig | grep "^$1" > /dev/null 2> /dev/null; then
	    declare -i n="${1#tap}"
	    n+=1
	    set__TAP "tap$n"
	else
	    return 0
	fi
    }
    do_Create_Tap(){
	openvpn --mktun --dev "$_TAP" --user "$_USER" #`id -un`	
    }
    if set__BRIDGE "$_BRIDGE" ; then do_Create_Bridge "$_BRIDGE" ; fi
    if set__TAP "$_TAP" ; then do_Create_Tap "$_TAP" ; fi
    if [[ "$_TYPE" = "dhcp" ]] ; then
	do_Routing_Filter "$_TAP"	
	#do_Add_Filter_Rules "$_TAP"
	do_Start_Dnsmasq "$_TAP"
    elif [[ "$_TYPE" = "static" ]] ; then
	do_Routing_Filter "$_TAP"
    fi
    if [[ -n "$_TAP" ]] ; then
	ifconfig "$_TAP" 0.0.0.0 up	
	brctl addif "$_BRIDGE" "$_TAP"
	sysctl -w net.ipv4.ip_forward=1
	ifconfig "$_BRIDGE" "$_GATEWAY" up	
    fi
    touch /tmp/${1}.pid
    printf '%s' "BRIDGE " >> /tmp/${1}.pid && printf '%s\n' "$_BRIDGE" >> /tmp/${1}.pid
    printf '%s' "TAP " >> /tmp/${1}.pid && printf '%s\n' "$_TAP" >> /tmp/${1}.pid
    rm /tmp/${1}.pid    
}
main "$@"
